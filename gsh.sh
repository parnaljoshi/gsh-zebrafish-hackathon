#!/bin/bash

#=======================================================================
# Originally generated by Elvira Kinzina, elvira@mit.edu, 12/10/2020, https://github.com/erikaznauryan/GSH-1
# Modified by: Iddo Friedberg Lab at Iowa State University
#=======================================================================


#=======================================================================
#							 Arguments
#=======================================================================

# THE DEFAULTS INITIALIZATION
# ./gsh.sh -genes true -oncogenes true -micrornas true -trnas true -lncrnas true -enhancers true -centromeres true -gaps true -dist_from_genes 50000 -dist_from_oncogenes 300000 -dist_from_micrornas 300000 -dist_from_trnas 150000 -dist_from_lncrnas 150000 -dist_from_enhancers 20000 -dist_from_centromeres 300000 -dist_from_gaps 300000

#------------------------ CONFIGURATION -------------------------------#

INPUT_DIR="AnnotationData"
OUTPUT_DIR="Output"
TMP_DIR="${OUTPUT_DIR}/tmpGsh"

mkdir -p "$TMP_DIR"

#------------------------ DEFAULT PARAMETERS --------------------------#

genes=true
oncogenes=true
micrornas=true
trnas=true
lncrnas=true
enhancers=true
centromeres=true
gaps=true
dist_from_genes=50000
dist_from_oncogenes=300000
dist_from_micrornas=300000
dist_from_trnas=150000
dist_from_lncrnas=150000
dist_from_enhancers=20000
dist_from_centromeres=300000
dist_from_gaps=300000

print_help()
{
	printf '%s\n' "Argbash is an argument parser generator for Bash."
	printf 'Usage: %s [-dist_from_genes] [-dist_from_oncogenes [-dist_from_micrornas] [-dist_from_micrornas] [-dist_from_trnas] [-dist_from_lncrnas] [-dist_from_enhancers] [-dist_from_centromeres] [-dist_from_gaps] [-h|--help]'
	printf '\t%s\n' "-genes: Whether to exclude regions with and around genes (default=true)"
	printf '\t%s\n' "-oncogenes: Whether to exclude regions with and around oncogenes (default=true)"
	printf '\t%s\n' "-micrornas: Whether to exclude regions with and around microRNAs (default=true)"
	printf '\t%s\n' "-trnas: Whether to exclude regions with and around tRNAs (default=true)"
	printf '\t%s\n' "-lncrnas: Whether to exclude regions with and around lncRNAs (default=true)"
	printf '\t%s\n' "-enhancers: Whether to exclude regions with and around enhancers (default=true)"
	printf '\t%s\n' "-centromeres: Whether to exclude regions with and around centromeres (default=true)"
	printf '\t%s\n' "-gaps: Whether to exclude regions with and around gaps (default=true)"
	printf '\t%s\n' "-dist_from_genes: Minimal distance from any safe harbor to any gene in bp (default=50000)"
	printf '\t%s\n' "-dist_from_oncogenes: Minimal distance from any safe harbor to any oncogene in bp (default=300000)"
	printf '\t%s\n' "-dist_from_micrornas: Minimal distance from any safe harbor to any microRNA in bp (default=300000)"
	printf '\t%s\n' "-dist_from_trnas: Minimal distance from any safe harbor to any tRNA in bp (default=150000)"
	printf '\t%s\n' "-dist_from_lncrnas: Minimal distance from any safe harbor to any long-non-coding RNA in bp (default=150000)"
	printf '\t%s\n' "-dist_from_enhancers: Minimal distance from any safe harbor to any enhancer in bp (default=20000)"
	printf '\t%s\n' "-dist_from_centromeres: Minimal distance from any safe harbor to any centromere in bp (default=300000)"
	printf '\t%s\n' "-dist_from_gaps: Minimal distance from any safe harbor to any gaps in bp (default=300000)"
	printf '\t%s\n' "-h, --help: Prints help"
}

POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    -h|--help)
    print_help
    exit 0
    ;;
    -genes)
    genes="$2"
    shift # past argument
    shift # past value
    ;;
    -oncogenes)
    oncogenes="$2"
    shift # past argument
    shift # past value
    ;;
    -micrornas)
    micrornas="$2"
    shift # past argument
    shift # past value
    ;;
    -trnas)
    trnas="$2"
    shift # past argument
    shift # past value
    ;;
    -lncrnas)
    lncrnas="$2"
    shift # past argument
    shift # past value
    ;;
    -ncrnas)
    ncrnas="$2"
    shift # past argument
    shift # past value
    ;;
    -smrnas)
    smrnas="$2"
    shift # past argument
    shift # past value
    ;;
    -enhancers)
    enhancers="$2"
    shift # past argument
    shift # past value
    ;;
    -centromeres)
    centromeres="$2"
    shift # past argument
    shift # past value
    ;;
    -gaps)
    gaps="$2"
    shift # past argument
    shift # past value
    ;;
    -dist_from_genes)
    dist_from_genes="$2"
    shift # past argument
    shift # past value
    ;;
    -dist_from_oncogenes)
    dist_from_oncogenes="$2"
    shift # past argument
    shift # past value
    ;;
    -dist_from_micrornas)
    dist_from_micrornas="$2"
    shift # past argument
    shift # past value
    ;;
    -dist_from_trnas)
    dist_from_trnas="$2"
    shift # past argument
    shift # past value
    ;;
    -dist_from_lncrnas)
    dist_from_lncrnas="$2"
    shift # past argument
    shift # past value
    ;;
    -dist_from_enhancers)
    dist_from_enhancers="$2"
    shift # past argument
    shift # past value
    ;;
    -dist_from_centromeres)
    dist_from_centromeres="$2"
    shift # past argument
    shift # past value
    ;;
    -dist_from_gaps)
    dist_from_gaps="$2"
    shift # past argument
    shift # past value
    ;;
esac
done

# apt-get update && apt-get install -y less

set -- "${POSITIONAL[@]}" # restore positional parameters

#=======================================================================

#------------------------ FUNCTION: Process BED with Flanks -----------#
add_flanks_and_merge() {
    local input_bed="$1"
    local output_dir="$2"
    local flank="$3"
    local chrom_sizes="${INPUT_DIR}/danRer11-chromInfo.txt"
    local base=$(basename "$input_bed" .bed)

    mkdir -p "$output_dir"

    bedtools slop -b "$flank" -i "$input_bed" -g "$chrom_sizes" > "${output_dir}/${base}_with_flanks.bed"
    sortBed -i "${output_dir}/${base}_with_flanks.bed" > "${output_dir}/${base}_with_flanks_sorted.bed"
    bedtools merge -i "${output_dir}/${base}_with_flanks_sorted.bed" > "${output_dir}/${base}_with_flanks_merged.bed"
}

#------------------------ GENES ---------------------------------------#
if [ "$genes" = true ]; then
    echo "[+] Processing Genes"
    DIR="${TMP_DIR}/genes"
    mkdir -p "$DIR"

    grep -P '\tgene\t' "${INPUT_DIR}/Danio_rerio.GRCz11.113.gtf" > "${DIR}/genes.gtf"
    awk '{ if ($0 ~ "transcript_id") print $0; else print $0" transcript_id \"\";"; }' "${DIR}/genes.gtf" > "${DIR}/genes_tx.gtf"

    gtf2bed < "${DIR}/genes_tx.gtf" | awk -v OFS="\t" '{print $1, $2, $3}' > "${DIR}/genes_raw.bed"

    awk 'BEGIN { OFS="\t" } $1 ~ /^[0-9XY]+$/ { $1="chr"$1; print }' "${DIR}/genes_raw.bed" > "${DIR}/genes.bed"

    add_flanks_and_merge "${DIR}/genes.bed" "$DIR" "$dist_from_genes"
fi

#------------------------ ONCOGENES -----------------------------------#
if [ "$oncogenes" = true ]; then
    echo "[+] Processing Oncogenes"
    DIR="${TMP_DIR}/oncogenes"
    mkdir -p "$DIR"

    grep -w -f "${INPUT_DIR}/danRer11-oncogenes_list.txt" "${TMP_DIR}/genes/genes_tx.gtf" > "${DIR}/oncogenes.gtf"
    gtf2bed < "${DIR}/oncogenes.gtf" | awk -v OFS="\t" '{print "chr"$1, $2, $3}' > "${DIR}/oncogenes_raw.bed"

    cut -f1 "${INPUT_DIR}/danRer11-chromInfo.txt" | sort | uniq > "${DIR}/valid_chroms.txt"
    awk 'NR==FNR {valid[$1]; next} $1 in valid' "${DIR}/valid_chroms.txt" "${DIR}/oncogenes_raw.bed" > "${DIR}/oncogenes.bed"

    add_flanks_and_merge "${DIR}/oncogenes.bed" "$DIR" "$dist_from_oncogenes"
fi

#------------------------ microRNAs -----------------------------------#
if [ "$micrornas" = true ]; then
    echo "[+] Processing microRNAs"
    DIR="${TMP_DIR}/micrornas"
    mkdir -p "$DIR"

    add_flanks_and_merge "${INPUT_DIR}/danRer11-miRNAs.bed" "$DIR" "$dist_from_micrornas"
fi

#------------------------ lncRNAs -------------------------------------#
if [ "$lncrnas" = true ]; then
    echo "[+] Processing lncRNAs"
    DIR="${TMP_DIR}/lncrnas"
    mkdir -p "$DIR"

    awk '{ if ($0 ~ "transcript_id") print $0; else print $0" transcript_id \"\";"; }' "${INPUT_DIR}/danRer11-lncRNA.gtf" > "${DIR}/lncRNAs.gtf"
    gtf2bed < "${DIR}/lncRNAs.gtf" | awk -v OFS="\t" '{print $1, $2, $3}' > "${DIR}/lncRNAs.bed"

    add_flanks_and_merge "${DIR}/lncRNAs.bed" "$DIR" "$dist_from_lncrnas"
fi

#------------------------ tRNAs ---------------------------------------#
if [ "$trnas" = true ]; then
    echo "[+] Processing tRNAs"
    DIR="${TMP_DIR}/trnas"
    mkdir -p "$DIR"

    gtf2bed < "${INPUT_DIR}/danRer11-tRNAs.gtf" | awk -v OFS="\t" '{print $1, $2, $3}' > "${DIR}/tRNAs.bed"

    add_flanks_and_merge "${DIR}/tRNAs.bed" "$DIR" "$dist_from_trnas"
fi

#------------------------ Enhancers -----------------------------------#
if [ "$enhancers" = true ]; then
    echo "[+] Processing Enhancers"
    DIR="${TMP_DIR}/enhancers"
    mkdir -p "$DIR"

    add_flanks_and_merge "${INPUT_DIR}/danRer11-enhancers.bed" "$DIR" "$dist_from_enhancers"
fi

#------------------------ Centromeres ---------------------------------#
if [ "$centromeres" = true ]; then
    echo "[+] Processing Centromeres"
    DIR="${TMP_DIR}/centromeres"
    mkdir -p "$DIR"

    tail -n +3 "${INPUT_DIR}/danRer11-centromeres.tsv" | awk -v OFS="\t" '{print $1, $2, $3}' > "${DIR}/centromeres.bed"

    add_flanks_and_merge "${DIR}/centromeres.bed" "$DIR" "$dist_from_centromeres"
fi

#------------------------ Gaps ----------------------------------------#
if [ "$gaps" = true ]; then
    echo "[+] Processing Gaps"
    DIR="${TMP_DIR}/gaps"
    mkdir -p "$DIR"

    tail -n +2 "${INPUT_DIR}/danRer11-gaps.txt" | cut -f 1,2,3 > "${DIR}/gaps.bed"

    add_flanks_and_merge "${DIR}/gaps.bed" "$DIR" "$dist_from_gaps"
fi

#------------------------ MERGE ALL REGIONS TO AVOID ------------------#
echo "[+] Merging all exclusion regions"
MERGE_DIR="${TMP_DIR}/merge"
mkdir -p "$MERGE_DIR"

ALL_BEDS=()

for TYPE in genes oncogenes micrornas trnas lncrnas enhancers centromeres gaps; do
    VAR_NAME="$TYPE"
    if [ "${!VAR_NAME}" = true ]; then
        FILE=$(find "${TMP_DIR}/${TYPE}" -name "*_with_flanks_merged.bed")
        if [ -f "$FILE" ]; then
            cat "$FILE" >> "${MERGE_DIR}/regions_to_avoid.bed"
        fi
    fi
done

sortBed -i "${MERGE_DIR}/regions_to_avoid.bed" > "${MERGE_DIR}/regions_to_avoid_sorted.bed"
bedtools merge -i "${MERGE_DIR}/regions_to_avoid_sorted.bed" > "${MERGE_DIR}/regions_to_avoid_merged.bed"

#------------------------ IDENTIFY SAFE HARBORS ------------------------#
echo "[+] Identifying Safe Harbor regions"

SAFE_DIR="${OUTPUT_DIR}/safe_harbors"
mkdir -p "$SAFE_DIR"

bedtools subtract \
    -a "${INPUT_DIR}/danRer11-chrom_coordinates.bed" \
    -b "${MERGE_DIR}/regions_to_avoid_merged.bed" \
    > "${SAFE_DIR}/Safe_harbors_with_alt.bed"

grep -v '_' "${SAFE_DIR}/Safe_harbors_with_alt.bed" > "${SAFE_DIR}/Safe_harbors.bed"
sortBed -i "${SAFE_DIR}/Safe_harbors.bed" > "${OUTPUT_DIR}/Safe_harbors.bed"

bedtools getfasta \
    -fi "${INPUT_DIR}/Danio_rerio.GRCz11.dna.primary_assembly.fa" \
    -bed "${OUTPUT_DIR}/Safe_harbors.bed" \
    > "${OUTPUT_DIR}/Safe_harbors.fasta"

echo "Results written to ${OUTPUT_DIR}/Safe_harbors.bed and ${OUTPUT_DIR}/Safe_harbors.fasta"


# docker tag local-image:tagname new-repo:tagname
# docker push new-repo:tagname
# #sudo docker run --rm   -v "$(pwd)/AnnotationData:/app/AnnotationData"   -v "$(pwd)/Output:/app/Output"   gsh-docker-custom-v5
